#!/usr/bin/env python3
import sys
import argparse
import pandas as pd
from Bio import SeqIO
import os


def get_single_copy_orthologs(input_file):
    """
    Extract single copy orthologs from OrthoFinder results (N0.tsv file)
    @params input_file: str, path to N0.tsv file generated by OrthoFinder
    @return: pd.DataFrame, with gene ids of single copy orthologs for each species
    """
    orthologs = pd.read_csv(input_file, sep='\t', header=0)
    orthologs.dropna(inplace=True)
    # get species names
    species = [c.split('_cds_aa')[0] for c in orthologs.columns if "cds_aa" in c]
    # identify single copy orthologs and extract
    single_copy_orthologs = orthologs[orthologs.applymap(lambda x: len(x.split(', '))).iloc[:, -len(species):].sum(axis=1) == len(species)]
    # set index
    single_copy_orthologs.set_index('HOG', drop=True, inplace=True)
    # only keep columns with gene ids for each species
    single_copy_orthologs = single_copy_orthologs.iloc[:, -len(species):]
    single_copy_orthologs.columns = species
    return single_copy_orthologs


def read_cds_sequences(cds_files):
    """
    Read fasta files of CDS
    @param cds_files: str, path to fasta file
    @return: dict, keys: CDS ids, values: CDS sequences
    """
    sequences = {}
    for cds in cds_files:
        species = cds.split('/')[-1].split('_cds_')[0]
        sequences[species] = SeqIO.to_dict(SeqIO.parse(cds, 'fasta'))
    return sequences


def write_ortholog_sequences(orthologs, aa_seqs, nt_seqs, output_dir):
    """
    Write single copy orthologs sequences of different species into one file
    @param orthologs: pd.DataFrame, single copy orthologs
    @param aa_seqs: dict, dictionary with corresponding amino acid sequences for each species
    @param nt_seqs: dict, dictionary with corresponding nucleotide sequences for each species
    @output_dir: str, directory of output files
    """
    # get species
    species = orthologs.columns
    # iterate over all single copy orthologs
    for hog in orthologs.index:
        # get current HOG
        ortholog = orthologs.loc[hog]
        nt_records = []
        aa_records = []
        # iterate over species
        for sp in species:
            # extract corresponding nt and aa sequences
            nt_records.append(nt_seqs[sp][ortholog.loc[sp]])
            aa_records.append(aa_seqs[sp][ortholog.loc[sp]])
        # write to file
        SeqIO.write(aa_records, f"{output_dir}{hog}.faa", 'fasta')
        SeqIO.write(nt_records, f"{output_dir}{hog}.fna", 'fasta')


def main(argv):
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input', help='Input file (N0.tsv file from OrthoFinder')
    parser.add_argument('-nt', '--cds_nt', nargs='+', help='Fasta files with nucleotide sequences of CDS')
    parser.add_argument('-aa', '--cds_aa', nargs='+', help='Fasta files with amino acid sequences of CDS')
    parser.add_argument('-o', '--output_dir', help='Output directory')
    args = parser.parse_args()
    single_copy_orthologs = get_single_copy_orthologs(args.input)
    nucleotide_sequences = read_cds_sequences(args.cds_nt)
    amino_acid_sequences = read_cds_sequences(args.cds_aa)
    if not os.path.isdir(args.output_dir):
        os.makedirs(args.output_dir)
    if not args.output_dir.endswith('/'):
        output = args.output_dir + '/'
    else:
        output = args.output_dir
    write_ortholog_sequences(single_copy_orthologs, amino_acid_sequences, nucleotide_sequences, output)


if __name__ == '__main__':
    main(sys.argv[1:])
